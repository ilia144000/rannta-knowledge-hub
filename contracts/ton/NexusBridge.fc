#include <stdlib.fc>

const OP_EXTERNAL_COMMIT = 0x11;
const OP_ENTANGLEMENT_APPLY = 0x13;

slice admin;
slice field_state_addr;
slice coherence_oracle_addr;
int commit_counter;

() load_data() inline {
  var ds = get_data();
  (admin, field_state_addr, coherence_oracle_addr, commit_counter) = (
    ds~load_msg_addr(),
    ds~load_msg_addr(),
    ds~load_msg_addr(),
    ds~load_int(32)
  );
}

() save_data() inline {
  var ds = begin_cell()
    .store_slice(admin)
    .store_slice(field_state_addr)
    .store_slice(coherence_oracle_addr)
    .store_int(commit_counter, 32)
    .end_cell();
  set_data(ds);
}

() emit_event(int op, slice payload) inline {
  var msg = begin_cell()
    .store_uint(op, 8)
    .store_slice(payload)
    .end_cell();
  send_raw_message(msg, 64);
}

cell build_internal_message(slice addr, cell body) inline {
  return begin_cell()
    .store_uint(0x18, 6)
    .store_slice(addr)
    .store_grams(0)
    .store_uint(0, 1)
    .store_ref(body)
    .end_cell();
}

(int) receive_external_commit(slice in_msg) inline {
  var source_chain = in_msg~load_uint(32);
  var commitment_hash = in_msg~load_slice();
  commit_counter += 1;

  var body = begin_cell()
    .store_uint(0x21, 8)
    .store_slice(commitment_hash)
    .end_cell();
  var msg = build_internal_message(field_state_addr, body);
  send_raw_message(msg, 1);

  var payload = begin_cell()
    .store_int(commit_counter, 32)
    .store_uint(source_chain, 32)
    .store_slice(commitment_hash)
    .end_cell();
  emit_event(OP_EXTERNAL_COMMIT, payload);

  return commit_counter;
}

() apply_entanglement(slice in_msg) inline {
  var target_shard = in_msg~load_uint(16);
  var delta_energy = in_msg~load_int(64);

  var body = begin_cell()
    .store_uint(0x31, 8)
    .store_uint(target_shard, 16)
    .store_int(delta_energy, 64)
    .end_cell();
  var msg = build_internal_message(coherence_oracle_addr, body);
  send_raw_message(msg, 1);

  var payload = begin_cell()
    .store_uint(target_shard, 16)
    .store_int(delta_energy, 64)
    .end_cell();
  emit_event(OP_ENTANGLEMENT_APPLY, payload);
}

() recv_internal(slice in_msg, int msg_value, cell msg_cell) impure {
  load_data();
  var op = in_msg~load_uint(8);
  if (op == OP_EXTERNAL_COMMIT) {
    receive_external_commit(in_msg);
  } elseif (op == OP_ENTANGLEMENT_APPLY) {
    apply_entanglement(in_msg);
  }
  save_data();
}

() recv_external(slice in_msg) impure {}

() init(slice initial_admin, slice fs_addr, slice oracle_addr) impure {
  admin = initial_admin;
  field_state_addr = fs_addr;
  coherence_oracle_addr = oracle_addr;
  commit_counter = 0;
  save_data();
}

const OP_SET_FIELD_ADDR  = 0xA1;
const OP_SET_ORACLE_ADDR = 0xA2;

(int) is_admin(slice addr) inline {
  return (slice_bits(addr) == slice_bits(admin)) ? 1 : 0;
}

() set_field_state_addr(slice in_msg, slice sender) inline {
  if (is_admin(sender) == 0) { throw(1001); }
  field_state_addr = in_msg~load_msg_addr();
}

() set_coherence_oracle_addr(slice in_msg, slice sender) inline {
  if (is_admin(sender) == 0) { throw(1002); }
  coherence_oracle_addr = in_msg~load_msg_addr();
}

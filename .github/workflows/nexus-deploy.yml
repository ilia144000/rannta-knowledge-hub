name: Deploy NexusBridge to TON Testnet
on: { workflow_dispatch: {} }

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node
      uses: actions/setup-node@v4
      with: { node-version: 20 }

    - name: Install Blueprint CLI
      run: npm i -g @ton-community/blueprint

    # --- Diagnostics: show tree, ensure paths exist ---
    - name: Diagnostics (ls)
      run: |
        echo "PWD=$(pwd)"
        ls -la
        echo "--- contracts ---"
        ls -la contracts || true
        echo "--- contracts/ton ---"
        ls -la contracts/ton || true
        echo "--- scripts ---"
        ls -la scripts || true

    # --- Ensure blueprint.config.ts exists (self-heal) ---
    - name: Ensure blueprint.config.ts
      run: |
        if [ ! -f "blueprint.config.ts" ]; then
          cat > blueprint.config.ts <<'EOF'
          import { NetworkProvider } from "@ton/blueprint";
          export const compile = {
            nexus: { language: "func", targets: ["contracts/ton/NexusBridge.fc"] },
          };
          export async function run(provider: NetworkProvider) {}
          EOF
          echo "Created blueprint.config.ts"
        else
          echo "blueprint.config.ts exists"
        fi

    # --- Verify FunC contract exists ---
    - name: Verify NexusBridge.fc presence
      run: |
        test -f contracts/ton/NexusBridge.fc || (echo "ERROR: contracts/ton/NexusBridge.fc not found" && exit 1)

    # --- Ensure deploy script exists (self-heal) ---
    - name: Ensure scripts/deployNexus.ts
      env:
        ADMIN: ${{ secrets.TON_TESTNET_ADMIN }}
      run: |
        mkdir -p scripts
        if [ ! -f "scripts/deployNexus.ts" ]; then
          cat > scripts/deployNexus.ts <<'EOF'
// scripts/deployNexus.ts
import { Address, beginCell, toNano } from "@ton/core";
import { compile, NetworkProvider } from "@ton/blueprint";
function noneSlice(){ return beginCell().endCell().beginParse(); }
export async function run(provider: NetworkProvider) {
  const code = await compile("nexus");
  const ADMIN = Address.parse("YOUR_TESTNET_WALLET_ADDRESS"); // patched later
  const data = beginCell()
    .storeSlice(beginCell().storeAddress(ADMIN).endCell().beginParse())
    .storeSlice(noneSlice())   // field_state_addr
    .storeSlice(noneSlice())   // coherence_oracle_addr
    .storeInt(0, 32)           // commit_counter
    .endCell();
  const contract = provider.openContractFromCode(code, data);
  await contract.sendDeploy(provider.sender(), toNano("0.05"));
  console.log("NexusBridge deployed at:", contract.address.toString());
}
EOF
          echo "Created scripts/deployNexus.ts"
        else
          echo "scripts/deployNexus.ts exists"
        fi
        # Patch admin address (required)
        if [ -n "$ADMIN" ]; then
          sed -i 's#Address.parse("YOUR_TESTNET_WALLET_ADDRESS")#Address.parse("'$ADMIN'")#' scripts/deployNexus.ts
        else
          echo "ERROR: Secret TON_TESTNET_ADMIN is empty"; exit 2
        fi

    # --- Import testnet key from secret (mnemonic) ---
    - name: Import Testnet Mnemonic
      env: { TON_TESTNET_MNEMONIC: ${{ secrets.TON_TESTNET_MNEMONIC }} }
      run: |
        if [ -z "$TON_TESTNET_MNEMONIC" ]; then
          echo "ERROR: Secret TON_TESTNET_MNEMONIC is empty"; exit 3
        fi
        mkdir -p ~/.config/blueprint
        echo "$TON_TESTNET_MNEMONIC" | blueprint keys import --network testnet --stdin
        blueprint keys show --network testnet

    # --- Build & Deploy ---
    - name: Build
      run: blueprint build

    - name: Deploy
      run: blueprint run scripts/deployNexus.ts --network testnet
